//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: user.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate User_UserClient, then call methods of this protocol to make API calls.
internal protocol User_UserClientProtocol: GRPCClient {
  func get_profile(
    _ request: User_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<User_Empty, User_UserProfileResponse>

  func update_profile(
    _ request: User_UpdateProfileRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<User_UpdateProfileRequest, User_BaseResponse>

  func change_password(
    _ request: User_ChangePasswordRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<User_ChangePasswordRequest, User_BaseResponse>

  func get_user_info(
    _ request: User_GetUserRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<User_GetUserRequest, User_UserInfoResponse>

  func search_user(
    _ request: User_SearchUserRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<User_SearchUserRequest, User_SearchUserResponse>

  func get_users(
    _ request: User_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<User_Empty, User_GetUsersResponse>

}

extension User_UserClientProtocol {

  ///----- FROM MY ACCOUNT -----
  ///
  /// - Parameters:
  ///   - request: Request to send to get_profile.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func get_profile(
    _ request: User_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<User_Empty, User_UserProfileResponse> {
    return self.makeUnaryCall(
      path: "/user.User/get_profile",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Unary call to update_profile
  ///
  /// - Parameters:
  ///   - request: Request to send to update_profile.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func update_profile(
    _ request: User_UpdateProfileRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<User_UpdateProfileRequest, User_BaseResponse> {
    return self.makeUnaryCall(
      path: "/user.User/update_profile",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Unary call to change_password
  ///
  /// - Parameters:
  ///   - request: Request to send to change_password.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func change_password(
    _ request: User_ChangePasswordRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<User_ChangePasswordRequest, User_BaseResponse> {
    return self.makeUnaryCall(
      path: "/user.User/change_password",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  ///----- FROM OTHER ACCOUNT -----
  ///
  /// - Parameters:
  ///   - request: Request to send to get_user_info.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func get_user_info(
    _ request: User_GetUserRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<User_GetUserRequest, User_UserInfoResponse> {
    return self.makeUnaryCall(
      path: "/user.User/get_user_info",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Unary call to search_user
  ///
  /// - Parameters:
  ///   - request: Request to send to search_user.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func search_user(
    _ request: User_SearchUserRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<User_SearchUserRequest, User_SearchUserResponse> {
    return self.makeUnaryCall(
      path: "/user.User/search_user",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Unary call to get_users
  ///
  /// - Parameters:
  ///   - request: Request to send to get_users.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func get_users(
    _ request: User_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<User_Empty, User_GetUsersResponse> {
    return self.makeUnaryCall(
      path: "/user.User/get_users",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

internal final class User_UserClient: User_UserClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions

  /// Creates a client for the user.User service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  internal init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol User_UserProvider: CallHandlerProvider {
  ///----- FROM MY ACCOUNT -----
  func get_profile(request: User_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<User_UserProfileResponse>
  func update_profile(request: User_UpdateProfileRequest, context: StatusOnlyCallContext) -> EventLoopFuture<User_BaseResponse>
  func change_password(request: User_ChangePasswordRequest, context: StatusOnlyCallContext) -> EventLoopFuture<User_BaseResponse>
  ///----- FROM OTHER ACCOUNT -----
  func get_user_info(request: User_GetUserRequest, context: StatusOnlyCallContext) -> EventLoopFuture<User_UserInfoResponse>
  func search_user(request: User_SearchUserRequest, context: StatusOnlyCallContext) -> EventLoopFuture<User_SearchUserResponse>
  func get_users(request: User_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<User_GetUsersResponse>
}

extension User_UserProvider {
  internal var serviceName: Substring { return "user.User" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "get_profile":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.get_profile(request: request, context: context)
        }
      }

    case "update_profile":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.update_profile(request: request, context: context)
        }
      }

    case "change_password":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.change_password(request: request, context: context)
        }
      }

    case "get_user_info":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.get_user_info(request: request, context: context)
        }
      }

    case "search_user":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.search_user(request: request, context: context)
        }
      }

    case "get_users":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.get_users(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

