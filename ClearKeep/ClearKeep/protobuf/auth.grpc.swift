//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: auth.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Auth_AuthClient, then call methods of this protocol to make API calls.
internal protocol Auth_AuthClientProtocol: GRPCClient {
  func login(
    _ request: Auth_AuthReq,
    callOptions: CallOptions?
  ) -> UnaryCall<Auth_AuthReq, Auth_AuthRes>

  func login_google(
    _ request: Auth_GoogleLoginReq,
    callOptions: CallOptions?
  ) -> UnaryCall<Auth_GoogleLoginReq, Auth_AuthRes>

  func login_office(
    _ request: Auth_OfficeLoginReq,
    callOptions: CallOptions?
  ) -> UnaryCall<Auth_OfficeLoginReq, Auth_AuthRes>

  func register(
    _ request: Auth_RegisterReq,
    callOptions: CallOptions?
  ) -> UnaryCall<Auth_RegisterReq, Auth_RegisterRes>

  func fogot_password(
    _ request: Auth_FogotPassWord,
    callOptions: CallOptions?
  ) -> UnaryCall<Auth_FogotPassWord, Auth_BaseResponse>

  func logout(
    _ request: Auth_LogoutReq,
    callOptions: CallOptions?
  ) -> UnaryCall<Auth_LogoutReq, Auth_BaseResponse>

}

extension Auth_AuthClientProtocol {

  /// Unary call to login
  ///
  /// - Parameters:
  ///   - request: Request to send to login.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func login(
    _ request: Auth_AuthReq,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Auth_AuthReq, Auth_AuthRes> {
    return self.makeUnaryCall(
      path: "/auth.Auth/login",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Unary call to login_google
  ///
  /// - Parameters:
  ///   - request: Request to send to login_google.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func login_google(
    _ request: Auth_GoogleLoginReq,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Auth_GoogleLoginReq, Auth_AuthRes> {
    return self.makeUnaryCall(
      path: "/auth.Auth/login_google",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Unary call to login_office
  ///
  /// - Parameters:
  ///   - request: Request to send to login_office.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func login_office(
    _ request: Auth_OfficeLoginReq,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Auth_OfficeLoginReq, Auth_AuthRes> {
    return self.makeUnaryCall(
      path: "/auth.Auth/login_office",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Unary call to register
  ///
  /// - Parameters:
  ///   - request: Request to send to register.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func register(
    _ request: Auth_RegisterReq,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Auth_RegisterReq, Auth_RegisterRes> {
    return self.makeUnaryCall(
      path: "/auth.Auth/register",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Unary call to fogot_password
  ///
  /// - Parameters:
  ///   - request: Request to send to fogot_password.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func fogot_password(
    _ request: Auth_FogotPassWord,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Auth_FogotPassWord, Auth_BaseResponse> {
    return self.makeUnaryCall(
      path: "/auth.Auth/fogot_password",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Unary call to logout
  ///
  /// - Parameters:
  ///   - request: Request to send to logout.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func logout(
    _ request: Auth_LogoutReq,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Auth_LogoutReq, Auth_BaseResponse> {
    return self.makeUnaryCall(
      path: "/auth.Auth/logout",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

internal final class Auth_AuthClient: Auth_AuthClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions

  /// Creates a client for the auth.Auth service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  internal init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Auth_AuthProvider: CallHandlerProvider {
  func login(request: Auth_AuthReq, context: StatusOnlyCallContext) -> EventLoopFuture<Auth_AuthRes>
  func login_google(request: Auth_GoogleLoginReq, context: StatusOnlyCallContext) -> EventLoopFuture<Auth_AuthRes>
  func login_office(request: Auth_OfficeLoginReq, context: StatusOnlyCallContext) -> EventLoopFuture<Auth_AuthRes>
  func register(request: Auth_RegisterReq, context: StatusOnlyCallContext) -> EventLoopFuture<Auth_RegisterRes>
  func fogot_password(request: Auth_FogotPassWord, context: StatusOnlyCallContext) -> EventLoopFuture<Auth_BaseResponse>
  func logout(request: Auth_LogoutReq, context: StatusOnlyCallContext) -> EventLoopFuture<Auth_BaseResponse>
}

extension Auth_AuthProvider {
  internal var serviceName: Substring { return "auth.Auth" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "login":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.login(request: request, context: context)
        }
      }

    case "login_google":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.login_google(request: request, context: context)
        }
      }

    case "login_office":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.login_office(request: request, context: context)
        }
      }

    case "register":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.register(request: request, context: context)
        }
      }

    case "fogot_password":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.fogot_password(request: request, context: context)
        }
      }

    case "logout":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.logout(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

