//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: signalc.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Signalc_SignalKeyDistributionClient, then call methods of this protocol to make API calls.
internal protocol Signalc_SignalKeyDistributionClientProtocol: GRPCClient {
  func registerBundleKey(
    _ request: Signalc_SignalRegisterKeysRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Signalc_SignalRegisterKeysRequest, Signalc_BaseResponse>

  func getKeyBundleByUserId(
    _ request: Signalc_SignalKeysUserRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Signalc_SignalKeysUserRequest, Signalc_SignalKeysUserResponse>

  func subscribe(
    _ request: Signalc_SubscribeAndListenRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Signalc_SubscribeAndListenRequest, Signalc_BaseResponse>

  func listen(
    _ request: Signalc_SubscribeAndListenRequest,
    callOptions: CallOptions?,
    handler: @escaping (Signalc_Publication) -> Void
  ) -> ServerStreamingCall<Signalc_SubscribeAndListenRequest, Signalc_Publication>

  func publish(
    _ request: Signalc_PublishRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Signalc_PublishRequest, Signalc_BaseResponse>

}

extension Signalc_SignalKeyDistributionClientProtocol {

  /// Unary call to RegisterBundleKey
  ///
  /// - Parameters:
  ///   - request: Request to send to RegisterBundleKey.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func registerBundleKey(
    _ request: Signalc_SignalRegisterKeysRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Signalc_SignalRegisterKeysRequest, Signalc_BaseResponse> {
    return self.makeUnaryCall(
      path: "/signalc.SignalKeyDistribution/RegisterBundleKey",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Unary call to GetKeyBundleByUserId
  ///
  /// - Parameters:
  ///   - request: Request to send to GetKeyBundleByUserId.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getKeyBundleByUserId(
    _ request: Signalc_SignalKeysUserRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Signalc_SignalKeysUserRequest, Signalc_SignalKeysUserResponse> {
    return self.makeUnaryCall(
      path: "/signalc.SignalKeyDistribution/GetKeyBundleByUserId",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Unary call to Subscribe
  ///
  /// - Parameters:
  ///   - request: Request to send to Subscribe.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func subscribe(
    _ request: Signalc_SubscribeAndListenRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Signalc_SubscribeAndListenRequest, Signalc_BaseResponse> {
    return self.makeUnaryCall(
      path: "/signalc.SignalKeyDistribution/Subscribe",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Server streaming call to Listen
  ///
  /// - Parameters:
  ///   - request: Request to send to Listen.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func listen(
    _ request: Signalc_SubscribeAndListenRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Signalc_Publication) -> Void
  ) -> ServerStreamingCall<Signalc_SubscribeAndListenRequest, Signalc_Publication> {
    return self.makeServerStreamingCall(
      path: "/signalc.SignalKeyDistribution/Listen",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      handler: handler
    )
  }

  /// Unary call to Publish
  ///
  /// - Parameters:
  ///   - request: Request to send to Publish.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func publish(
    _ request: Signalc_PublishRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Signalc_PublishRequest, Signalc_BaseResponse> {
    return self.makeUnaryCall(
      path: "/signalc.SignalKeyDistribution/Publish",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

internal final class Signalc_SignalKeyDistributionClient: Signalc_SignalKeyDistributionClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions

  /// Creates a client for the signalc.SignalKeyDistribution service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  internal init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Signalc_SignalKeyDistributionProvider: CallHandlerProvider {
  func registerBundleKey(request: Signalc_SignalRegisterKeysRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Signalc_BaseResponse>
  func getKeyBundleByUserId(request: Signalc_SignalKeysUserRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Signalc_SignalKeysUserResponse>
  func subscribe(request: Signalc_SubscribeAndListenRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Signalc_BaseResponse>
  func listen(request: Signalc_SubscribeAndListenRequest, context: StreamingResponseCallContext<Signalc_Publication>) -> EventLoopFuture<GRPCStatus>
  func publish(request: Signalc_PublishRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Signalc_BaseResponse>
}

extension Signalc_SignalKeyDistributionProvider {
  internal var serviceName: Substring { return "signalc.SignalKeyDistribution" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "RegisterBundleKey":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.registerBundleKey(request: request, context: context)
        }
      }

    case "GetKeyBundleByUserId":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getKeyBundleByUserId(request: request, context: context)
        }
      }

    case "Subscribe":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.subscribe(request: request, context: context)
        }
      }

    case "Listen":
      return CallHandlerFactory.makeServerStreaming(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listen(request: request, context: context)
        }
      }

    case "Publish":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.publish(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

