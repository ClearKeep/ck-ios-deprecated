//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: signalc_group.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate SignalcGroup_GroupSenderKeyDistributionClient, then call methods of this protocol to make API calls.
internal protocol SignalcGroup_GroupSenderKeyDistributionClientProtocol: GRPCClient {
  func registerSenderKeyGroup(
    _ request: SignalcGroup_GroupRegisterSenderKeyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<SignalcGroup_GroupRegisterSenderKeyRequest, SignalcGroup_GroupRegisterSenderKeyResponse>

  func getSenderKeyInGroup(
    _ request: SignalcGroup_GroupGetSenderKeyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<SignalcGroup_GroupGetSenderKeyRequest, SignalcGroup_GroupGetSenderKeyResponse>

  func getAllSenderKeyInGroup(
    _ request: SignalcGroup_GroupGetAllSenderKeyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<SignalcGroup_GroupGetAllSenderKeyRequest, SignalcGroup_GroupGetAllSenderKeyResponse>

  func subscribe(
    _ request: SignalcGroup_GroupSubscribeAndListenRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<SignalcGroup_GroupSubscribeAndListenRequest, SignalcGroup_BaseResponse>

  func listen(
    _ request: SignalcGroup_GroupSubscribeAndListenRequest,
    callOptions: CallOptions?,
    handler: @escaping (SignalcGroup_GroupPublication) -> Void
  ) -> ServerStreamingCall<SignalcGroup_GroupSubscribeAndListenRequest, SignalcGroup_GroupPublication>

  func publish(
    _ request: SignalcGroup_GroupPublishRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<SignalcGroup_GroupPublishRequest, SignalcGroup_BaseResponse>

}

extension SignalcGroup_GroupSenderKeyDistributionClientProtocol {

  /// Unary call to RegisterSenderKeyGroup
  ///
  /// - Parameters:
  ///   - request: Request to send to RegisterSenderKeyGroup.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func registerSenderKeyGroup(
    _ request: SignalcGroup_GroupRegisterSenderKeyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SignalcGroup_GroupRegisterSenderKeyRequest, SignalcGroup_GroupRegisterSenderKeyResponse> {
    return self.makeUnaryCall(
      path: "/signalc_group.GroupSenderKeyDistribution/RegisterSenderKeyGroup",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Unary call to GetSenderKeyInGroup
  ///
  /// - Parameters:
  ///   - request: Request to send to GetSenderKeyInGroup.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getSenderKeyInGroup(
    _ request: SignalcGroup_GroupGetSenderKeyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SignalcGroup_GroupGetSenderKeyRequest, SignalcGroup_GroupGetSenderKeyResponse> {
    return self.makeUnaryCall(
      path: "/signalc_group.GroupSenderKeyDistribution/GetSenderKeyInGroup",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Unary call to GetAllSenderKeyInGroup
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAllSenderKeyInGroup.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getAllSenderKeyInGroup(
    _ request: SignalcGroup_GroupGetAllSenderKeyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SignalcGroup_GroupGetAllSenderKeyRequest, SignalcGroup_GroupGetAllSenderKeyResponse> {
    return self.makeUnaryCall(
      path: "/signalc_group.GroupSenderKeyDistribution/GetAllSenderKeyInGroup",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Unary call to Subscribe
  ///
  /// - Parameters:
  ///   - request: Request to send to Subscribe.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func subscribe(
    _ request: SignalcGroup_GroupSubscribeAndListenRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SignalcGroup_GroupSubscribeAndListenRequest, SignalcGroup_BaseResponse> {
    return self.makeUnaryCall(
      path: "/signalc_group.GroupSenderKeyDistribution/Subscribe",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Server streaming call to Listen
  ///
  /// - Parameters:
  ///   - request: Request to send to Listen.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func listen(
    _ request: SignalcGroup_GroupSubscribeAndListenRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (SignalcGroup_GroupPublication) -> Void
  ) -> ServerStreamingCall<SignalcGroup_GroupSubscribeAndListenRequest, SignalcGroup_GroupPublication> {
    return self.makeServerStreamingCall(
      path: "/signalc_group.GroupSenderKeyDistribution/Listen",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      handler: handler
    )
  }

  /// Unary call to Publish
  ///
  /// - Parameters:
  ///   - request: Request to send to Publish.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func publish(
    _ request: SignalcGroup_GroupPublishRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SignalcGroup_GroupPublishRequest, SignalcGroup_BaseResponse> {
    return self.makeUnaryCall(
      path: "/signalc_group.GroupSenderKeyDistribution/Publish",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

internal final class SignalcGroup_GroupSenderKeyDistributionClient: SignalcGroup_GroupSenderKeyDistributionClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions

  /// Creates a client for the signalc_group.GroupSenderKeyDistribution service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  internal init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol SignalcGroup_GroupSenderKeyDistributionProvider: CallHandlerProvider {
  func registerSenderKeyGroup(request: SignalcGroup_GroupRegisterSenderKeyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SignalcGroup_GroupRegisterSenderKeyResponse>
  func getSenderKeyInGroup(request: SignalcGroup_GroupGetSenderKeyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SignalcGroup_GroupGetSenderKeyResponse>
  func getAllSenderKeyInGroup(request: SignalcGroup_GroupGetAllSenderKeyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SignalcGroup_GroupGetAllSenderKeyResponse>
  func subscribe(request: SignalcGroup_GroupSubscribeAndListenRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SignalcGroup_BaseResponse>
  func listen(request: SignalcGroup_GroupSubscribeAndListenRequest, context: StreamingResponseCallContext<SignalcGroup_GroupPublication>) -> EventLoopFuture<GRPCStatus>
  func publish(request: SignalcGroup_GroupPublishRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SignalcGroup_BaseResponse>
}

extension SignalcGroup_GroupSenderKeyDistributionProvider {
  internal var serviceName: Substring { return "signalc_group.GroupSenderKeyDistribution" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "RegisterSenderKeyGroup":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.registerSenderKeyGroup(request: request, context: context)
        }
      }

    case "GetSenderKeyInGroup":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getSenderKeyInGroup(request: request, context: context)
        }
      }

    case "GetAllSenderKeyInGroup":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getAllSenderKeyInGroup(request: request, context: context)
        }
      }

    case "Subscribe":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.subscribe(request: request, context: context)
        }
      }

    case "Listen":
      return CallHandlerFactory.makeServerStreaming(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listen(request: request, context: context)
        }
      }

    case "Publish":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.publish(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

