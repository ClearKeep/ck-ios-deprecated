// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: signal.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///errors response
struct Signal_ErrorRes {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var code: Int64 = 0

  var message: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Signal_BaseResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var success: Bool = false

  var errors: Signal_ErrorRes {
    get {return _errors ?? Signal_ErrorRes()}
    set {_errors = newValue}
  }
  /// Returns true if `errors` has been explicitly set.
  var hasErrors: Bool {return self._errors != nil}
  /// Clears the value of `errors`. Subsequent reads from it will return its default value.
  mutating func clearErrors() {self._errors = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _errors: Signal_ErrorRes? = nil
}

/// ----- SIGNAL PEER TO PEER KEY -----
/// Request: register client key
struct Signal_PeerRegisterClientKeyRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var clientID: String = String()

  var registrationID: Int32 = 0

  var deviceID: Int32 = 0

  var identityKeyPublic: Data = SwiftProtobuf.Internal.emptyData

  var preKeyID: Int32 = 0

  var preKey: Data = SwiftProtobuf.Internal.emptyData

  var signedPreKeyID: Int32 = 0

  var signedPreKey: Data = SwiftProtobuf.Internal.emptyData

  var signedPreKeySignature: Data = SwiftProtobuf.Internal.emptyData

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Request: Get client key via clientId
struct Signal_PeerGetClientKeyRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var clientID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Response
struct Signal_PeerGetClientKeyResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var clientID: String = String()

  var registrationID: Int32 = 0

  var deviceID: Int32 = 0

  var identityKeyPublic: Data = SwiftProtobuf.Internal.emptyData

  var preKeyID: Int32 = 0

  var preKey: Data = SwiftProtobuf.Internal.emptyData

  var signedPreKeyID: Int32 = 0

  var signedPreKey: Data = SwiftProtobuf.Internal.emptyData

  var signedPreKeySignature: Data = SwiftProtobuf.Internal.emptyData

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// ----- SIGNAL GROUP KEY -----
/// Request: register key of client when join to group
struct Signal_GroupRegisterClientKeyRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var groupID: Int64 = 0

  var clientID: String = String()

  var deviceID: Int32 = 0

  var clientKeyDistribution: Data = SwiftProtobuf.Internal.emptyData

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///object
struct Signal_GroupClientKeyObject {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var clientID: String = String()

  var deviceID: Int32 = 0

  var clientKeyDistribution: Data = SwiftProtobuf.Internal.emptyData

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///Request: Get client key via clientId and groupId
struct Signal_GroupGetClientKeyRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var groupID: Int64 = 0

  var clientID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///Response
struct Signal_GroupGetClientKeyResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var groupID: Int64 = 0

  var clientKey: Signal_GroupClientKeyObject {
    get {return _clientKey ?? Signal_GroupClientKeyObject()}
    set {_clientKey = newValue}
  }
  /// Returns true if `clientKey` has been explicitly set.
  var hasClientKey: Bool {return self._clientKey != nil}
  /// Clears the value of `clientKey`. Subsequent reads from it will return its default value.
  mutating func clearClientKey() {self._clientKey = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _clientKey: Signal_GroupClientKeyObject? = nil
}

/// Request: Get all client key via groupId
struct Signal_GroupGetAllClientKeyRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var groupID: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Response
struct Signal_GroupGetAllClientKeyResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var groupID: Int64 = 0

  var lstClientKey: [Signal_GroupClientKeyObject] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "signal"

extension Signal_ErrorRes: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ErrorRes"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "message"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.message)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != 0 {
      try visitor.visitSingularInt64Field(value: self.code, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Signal_ErrorRes, rhs: Signal_ErrorRes) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Signal_BaseResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BaseResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "success"),
    2: .same(proto: "errors"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.success)
      case 2: try decoder.decodeSingularMessageField(value: &self._errors)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.success != false {
      try visitor.visitSingularBoolField(value: self.success, fieldNumber: 1)
    }
    if let v = self._errors {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Signal_BaseResponse, rhs: Signal_BaseResponse) -> Bool {
    if lhs.success != rhs.success {return false}
    if lhs._errors != rhs._errors {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Signal_PeerRegisterClientKeyRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PeerRegisterClientKeyRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "clientId"),
    2: .same(proto: "registrationId"),
    3: .same(proto: "deviceId"),
    4: .same(proto: "identityKeyPublic"),
    5: .same(proto: "preKeyId"),
    6: .same(proto: "preKey"),
    7: .same(proto: "signedPreKeyId"),
    8: .same(proto: "signedPreKey"),
    9: .same(proto: "signedPreKeySignature"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.clientID)
      case 2: try decoder.decodeSingularInt32Field(value: &self.registrationID)
      case 3: try decoder.decodeSingularInt32Field(value: &self.deviceID)
      case 4: try decoder.decodeSingularBytesField(value: &self.identityKeyPublic)
      case 5: try decoder.decodeSingularInt32Field(value: &self.preKeyID)
      case 6: try decoder.decodeSingularBytesField(value: &self.preKey)
      case 7: try decoder.decodeSingularInt32Field(value: &self.signedPreKeyID)
      case 8: try decoder.decodeSingularBytesField(value: &self.signedPreKey)
      case 9: try decoder.decodeSingularBytesField(value: &self.signedPreKeySignature)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.clientID.isEmpty {
      try visitor.visitSingularStringField(value: self.clientID, fieldNumber: 1)
    }
    if self.registrationID != 0 {
      try visitor.visitSingularInt32Field(value: self.registrationID, fieldNumber: 2)
    }
    if self.deviceID != 0 {
      try visitor.visitSingularInt32Field(value: self.deviceID, fieldNumber: 3)
    }
    if !self.identityKeyPublic.isEmpty {
      try visitor.visitSingularBytesField(value: self.identityKeyPublic, fieldNumber: 4)
    }
    if self.preKeyID != 0 {
      try visitor.visitSingularInt32Field(value: self.preKeyID, fieldNumber: 5)
    }
    if !self.preKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.preKey, fieldNumber: 6)
    }
    if self.signedPreKeyID != 0 {
      try visitor.visitSingularInt32Field(value: self.signedPreKeyID, fieldNumber: 7)
    }
    if !self.signedPreKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.signedPreKey, fieldNumber: 8)
    }
    if !self.signedPreKeySignature.isEmpty {
      try visitor.visitSingularBytesField(value: self.signedPreKeySignature, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Signal_PeerRegisterClientKeyRequest, rhs: Signal_PeerRegisterClientKeyRequest) -> Bool {
    if lhs.clientID != rhs.clientID {return false}
    if lhs.registrationID != rhs.registrationID {return false}
    if lhs.deviceID != rhs.deviceID {return false}
    if lhs.identityKeyPublic != rhs.identityKeyPublic {return false}
    if lhs.preKeyID != rhs.preKeyID {return false}
    if lhs.preKey != rhs.preKey {return false}
    if lhs.signedPreKeyID != rhs.signedPreKeyID {return false}
    if lhs.signedPreKey != rhs.signedPreKey {return false}
    if lhs.signedPreKeySignature != rhs.signedPreKeySignature {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Signal_PeerGetClientKeyRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PeerGetClientKeyRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "clientId"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.clientID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.clientID.isEmpty {
      try visitor.visitSingularStringField(value: self.clientID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Signal_PeerGetClientKeyRequest, rhs: Signal_PeerGetClientKeyRequest) -> Bool {
    if lhs.clientID != rhs.clientID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Signal_PeerGetClientKeyResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PeerGetClientKeyResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "clientId"),
    2: .same(proto: "registrationId"),
    3: .same(proto: "deviceId"),
    4: .same(proto: "identityKeyPublic"),
    5: .same(proto: "preKeyId"),
    6: .same(proto: "preKey"),
    7: .same(proto: "signedPreKeyId"),
    8: .same(proto: "signedPreKey"),
    9: .same(proto: "signedPreKeySignature"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.clientID)
      case 2: try decoder.decodeSingularInt32Field(value: &self.registrationID)
      case 3: try decoder.decodeSingularInt32Field(value: &self.deviceID)
      case 4: try decoder.decodeSingularBytesField(value: &self.identityKeyPublic)
      case 5: try decoder.decodeSingularInt32Field(value: &self.preKeyID)
      case 6: try decoder.decodeSingularBytesField(value: &self.preKey)
      case 7: try decoder.decodeSingularInt32Field(value: &self.signedPreKeyID)
      case 8: try decoder.decodeSingularBytesField(value: &self.signedPreKey)
      case 9: try decoder.decodeSingularBytesField(value: &self.signedPreKeySignature)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.clientID.isEmpty {
      try visitor.visitSingularStringField(value: self.clientID, fieldNumber: 1)
    }
    if self.registrationID != 0 {
      try visitor.visitSingularInt32Field(value: self.registrationID, fieldNumber: 2)
    }
    if self.deviceID != 0 {
      try visitor.visitSingularInt32Field(value: self.deviceID, fieldNumber: 3)
    }
    if !self.identityKeyPublic.isEmpty {
      try visitor.visitSingularBytesField(value: self.identityKeyPublic, fieldNumber: 4)
    }
    if self.preKeyID != 0 {
      try visitor.visitSingularInt32Field(value: self.preKeyID, fieldNumber: 5)
    }
    if !self.preKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.preKey, fieldNumber: 6)
    }
    if self.signedPreKeyID != 0 {
      try visitor.visitSingularInt32Field(value: self.signedPreKeyID, fieldNumber: 7)
    }
    if !self.signedPreKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.signedPreKey, fieldNumber: 8)
    }
    if !self.signedPreKeySignature.isEmpty {
      try visitor.visitSingularBytesField(value: self.signedPreKeySignature, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Signal_PeerGetClientKeyResponse, rhs: Signal_PeerGetClientKeyResponse) -> Bool {
    if lhs.clientID != rhs.clientID {return false}
    if lhs.registrationID != rhs.registrationID {return false}
    if lhs.deviceID != rhs.deviceID {return false}
    if lhs.identityKeyPublic != rhs.identityKeyPublic {return false}
    if lhs.preKeyID != rhs.preKeyID {return false}
    if lhs.preKey != rhs.preKey {return false}
    if lhs.signedPreKeyID != rhs.signedPreKeyID {return false}
    if lhs.signedPreKey != rhs.signedPreKey {return false}
    if lhs.signedPreKeySignature != rhs.signedPreKeySignature {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Signal_GroupRegisterClientKeyRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GroupRegisterClientKeyRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "groupId"),
    2: .same(proto: "clientId"),
    3: .same(proto: "deviceId"),
    4: .same(proto: "clientKeyDistribution"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.groupID)
      case 2: try decoder.decodeSingularStringField(value: &self.clientID)
      case 3: try decoder.decodeSingularInt32Field(value: &self.deviceID)
      case 4: try decoder.decodeSingularBytesField(value: &self.clientKeyDistribution)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.groupID != 0 {
      try visitor.visitSingularInt64Field(value: self.groupID, fieldNumber: 1)
    }
    if !self.clientID.isEmpty {
      try visitor.visitSingularStringField(value: self.clientID, fieldNumber: 2)
    }
    if self.deviceID != 0 {
      try visitor.visitSingularInt32Field(value: self.deviceID, fieldNumber: 3)
    }
    if !self.clientKeyDistribution.isEmpty {
      try visitor.visitSingularBytesField(value: self.clientKeyDistribution, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Signal_GroupRegisterClientKeyRequest, rhs: Signal_GroupRegisterClientKeyRequest) -> Bool {
    if lhs.groupID != rhs.groupID {return false}
    if lhs.clientID != rhs.clientID {return false}
    if lhs.deviceID != rhs.deviceID {return false}
    if lhs.clientKeyDistribution != rhs.clientKeyDistribution {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Signal_GroupClientKeyObject: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GroupClientKeyObject"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "clientId"),
    3: .same(proto: "deviceId"),
    4: .same(proto: "clientKeyDistribution"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeSingularStringField(value: &self.clientID)
      case 3: try decoder.decodeSingularInt32Field(value: &self.deviceID)
      case 4: try decoder.decodeSingularBytesField(value: &self.clientKeyDistribution)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.clientID.isEmpty {
      try visitor.visitSingularStringField(value: self.clientID, fieldNumber: 2)
    }
    if self.deviceID != 0 {
      try visitor.visitSingularInt32Field(value: self.deviceID, fieldNumber: 3)
    }
    if !self.clientKeyDistribution.isEmpty {
      try visitor.visitSingularBytesField(value: self.clientKeyDistribution, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Signal_GroupClientKeyObject, rhs: Signal_GroupClientKeyObject) -> Bool {
    if lhs.clientID != rhs.clientID {return false}
    if lhs.deviceID != rhs.deviceID {return false}
    if lhs.clientKeyDistribution != rhs.clientKeyDistribution {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Signal_GroupGetClientKeyRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GroupGetClientKeyRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "groupId"),
    2: .same(proto: "clientId"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.groupID)
      case 2: try decoder.decodeSingularStringField(value: &self.clientID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.groupID != 0 {
      try visitor.visitSingularInt64Field(value: self.groupID, fieldNumber: 1)
    }
    if !self.clientID.isEmpty {
      try visitor.visitSingularStringField(value: self.clientID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Signal_GroupGetClientKeyRequest, rhs: Signal_GroupGetClientKeyRequest) -> Bool {
    if lhs.groupID != rhs.groupID {return false}
    if lhs.clientID != rhs.clientID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Signal_GroupGetClientKeyResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GroupGetClientKeyResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "groupId"),
    2: .same(proto: "clientKey"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.groupID)
      case 2: try decoder.decodeSingularMessageField(value: &self._clientKey)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.groupID != 0 {
      try visitor.visitSingularInt64Field(value: self.groupID, fieldNumber: 1)
    }
    if let v = self._clientKey {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Signal_GroupGetClientKeyResponse, rhs: Signal_GroupGetClientKeyResponse) -> Bool {
    if lhs.groupID != rhs.groupID {return false}
    if lhs._clientKey != rhs._clientKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Signal_GroupGetAllClientKeyRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GroupGetAllClientKeyRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "groupId"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.groupID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.groupID != 0 {
      try visitor.visitSingularInt64Field(value: self.groupID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Signal_GroupGetAllClientKeyRequest, rhs: Signal_GroupGetAllClientKeyRequest) -> Bool {
    if lhs.groupID != rhs.groupID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Signal_GroupGetAllClientKeyResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GroupGetAllClientKeyResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "groupId"),
    2: .same(proto: "lstClientKey"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.groupID)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.lstClientKey)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.groupID != 0 {
      try visitor.visitSingularInt64Field(value: self.groupID, fieldNumber: 1)
    }
    if !self.lstClientKey.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.lstClientKey, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Signal_GroupGetAllClientKeyResponse, rhs: Signal_GroupGetAllClientKeyResponse) -> Bool {
    if lhs.groupID != rhs.groupID {return false}
    if lhs.lstClientKey != rhs.lstClientKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
