//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: signal.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Signal_SignalKeyDistributionClient, then call methods of this protocol to make API calls.
internal protocol Signal_SignalKeyDistributionClientProtocol: GRPCClient {
  func peerRegisterClientKey(
    _ request: Signal_PeerRegisterClientKeyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Signal_PeerRegisterClientKeyRequest, Signal_BaseResponse>

  func peerGetClientKey(
    _ request: Signal_PeerGetClientKeyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Signal_PeerGetClientKeyRequest, Signal_PeerGetClientKeyResponse>

  func groupRegisterClientKey(
    _ request: Signal_GroupRegisterClientKeyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Signal_GroupRegisterClientKeyRequest, Signal_BaseResponse>

  func groupGetClientKey(
    _ request: Signal_GroupGetClientKeyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Signal_GroupGetClientKeyRequest, Signal_GroupGetClientKeyResponse>

  func groupGetAllClientKey(
    _ request: Signal_GroupGetAllClientKeyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Signal_GroupGetAllClientKeyRequest, Signal_GroupGetAllClientKeyResponse>

}

extension Signal_SignalKeyDistributionClientProtocol {

  ///peer
  ///
  /// - Parameters:
  ///   - request: Request to send to PeerRegisterClientKey.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func peerRegisterClientKey(
    _ request: Signal_PeerRegisterClientKeyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Signal_PeerRegisterClientKeyRequest, Signal_BaseResponse> {
    return self.makeUnaryCall(
      path: "/signal.SignalKeyDistribution/PeerRegisterClientKey",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Unary call to PeerGetClientKey
  ///
  /// - Parameters:
  ///   - request: Request to send to PeerGetClientKey.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func peerGetClientKey(
    _ request: Signal_PeerGetClientKeyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Signal_PeerGetClientKeyRequest, Signal_PeerGetClientKeyResponse> {
    return self.makeUnaryCall(
      path: "/signal.SignalKeyDistribution/PeerGetClientKey",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  ///group
  ///
  /// - Parameters:
  ///   - request: Request to send to GroupRegisterClientKey.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func groupRegisterClientKey(
    _ request: Signal_GroupRegisterClientKeyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Signal_GroupRegisterClientKeyRequest, Signal_BaseResponse> {
    return self.makeUnaryCall(
      path: "/signal.SignalKeyDistribution/GroupRegisterClientKey",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Unary call to GroupGetClientKey
  ///
  /// - Parameters:
  ///   - request: Request to send to GroupGetClientKey.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func groupGetClientKey(
    _ request: Signal_GroupGetClientKeyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Signal_GroupGetClientKeyRequest, Signal_GroupGetClientKeyResponse> {
    return self.makeUnaryCall(
      path: "/signal.SignalKeyDistribution/GroupGetClientKey",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Unary call to GroupGetAllClientKey
  ///
  /// - Parameters:
  ///   - request: Request to send to GroupGetAllClientKey.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func groupGetAllClientKey(
    _ request: Signal_GroupGetAllClientKeyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Signal_GroupGetAllClientKeyRequest, Signal_GroupGetAllClientKeyResponse> {
    return self.makeUnaryCall(
      path: "/signal.SignalKeyDistribution/GroupGetAllClientKey",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

internal final class Signal_SignalKeyDistributionClient: Signal_SignalKeyDistributionClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions

  /// Creates a client for the signal.SignalKeyDistribution service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  internal init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Signal_SignalKeyDistributionProvider: CallHandlerProvider {
  ///peer
  func peerRegisterClientKey(request: Signal_PeerRegisterClientKeyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Signal_BaseResponse>
  func peerGetClientKey(request: Signal_PeerGetClientKeyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Signal_PeerGetClientKeyResponse>
  ///group
  func groupRegisterClientKey(request: Signal_GroupRegisterClientKeyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Signal_BaseResponse>
  func groupGetClientKey(request: Signal_GroupGetClientKeyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Signal_GroupGetClientKeyResponse>
  func groupGetAllClientKey(request: Signal_GroupGetAllClientKeyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Signal_GroupGetAllClientKeyResponse>
}

extension Signal_SignalKeyDistributionProvider {
  internal var serviceName: Substring { return "signal.SignalKeyDistribution" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "PeerRegisterClientKey":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.peerRegisterClientKey(request: request, context: context)
        }
      }

    case "PeerGetClientKey":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.peerGetClientKey(request: request, context: context)
        }
      }

    case "GroupRegisterClientKey":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.groupRegisterClientKey(request: request, context: context)
        }
      }

    case "GroupGetClientKey":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.groupGetClientKey(request: request, context: context)
        }
      }

    case "GroupGetAllClientKey":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.groupGetAllClientKey(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

