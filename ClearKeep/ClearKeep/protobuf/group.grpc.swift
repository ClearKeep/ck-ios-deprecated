//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: group.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Group_GroupClient, then call methods of this protocol to make API calls.
internal protocol Group_GroupClientProtocol: GRPCClient {
  func create_group(
    _ request: Group_CreateGroupRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Group_CreateGroupRequest, Group_GroupObjectResponse>

  func get_group(
    _ request: Group_GetGroupRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Group_GetGroupRequest, Group_GroupObjectResponse>

  func search_groups(
    _ request: Group_SearchGroupsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Group_SearchGroupsRequest, Group_SearchGroupsResponse>

  func get_joined_groups(
    _ request: Group_GetJoinedGroupsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Group_GetJoinedGroupsRequest, Group_GetJoinedGroupsResponse>

  func invite_to_group(
    _ request: Group_InviteToGroupRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Group_InviteToGroupRequest, Group_BaseResponse>

  func join_group(
    _ request: Group_JoinGroupRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Group_JoinGroupRequest, Group_BaseResponse>

}

extension Group_GroupClientProtocol {

  /// Unary call to create_group
  ///
  /// - Parameters:
  ///   - request: Request to send to create_group.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func create_group(
    _ request: Group_CreateGroupRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Group_CreateGroupRequest, Group_GroupObjectResponse> {
    return self.makeUnaryCall(
      path: "/group.Group/create_group",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Unary call to get_group
  ///
  /// - Parameters:
  ///   - request: Request to send to get_group.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func get_group(
    _ request: Group_GetGroupRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Group_GetGroupRequest, Group_GroupObjectResponse> {
    return self.makeUnaryCall(
      path: "/group.Group/get_group",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Unary call to search_groups
  ///
  /// - Parameters:
  ///   - request: Request to send to search_groups.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func search_groups(
    _ request: Group_SearchGroupsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Group_SearchGroupsRequest, Group_SearchGroupsResponse> {
    return self.makeUnaryCall(
      path: "/group.Group/search_groups",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Unary call to get_joined_groups
  ///
  /// - Parameters:
  ///   - request: Request to send to get_joined_groups.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func get_joined_groups(
    _ request: Group_GetJoinedGroupsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Group_GetJoinedGroupsRequest, Group_GetJoinedGroupsResponse> {
    return self.makeUnaryCall(
      path: "/group.Group/get_joined_groups",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Unary call to invite_to_group
  ///
  /// - Parameters:
  ///   - request: Request to send to invite_to_group.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func invite_to_group(
    _ request: Group_InviteToGroupRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Group_InviteToGroupRequest, Group_BaseResponse> {
    return self.makeUnaryCall(
      path: "/group.Group/invite_to_group",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Unary call to join_group
  ///
  /// - Parameters:
  ///   - request: Request to send to join_group.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func join_group(
    _ request: Group_JoinGroupRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Group_JoinGroupRequest, Group_BaseResponse> {
    return self.makeUnaryCall(
      path: "/group.Group/join_group",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

internal final class Group_GroupClient: Group_GroupClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions

  /// Creates a client for the group.Group service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  internal init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Group_GroupProvider: CallHandlerProvider {
  func create_group(request: Group_CreateGroupRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Group_GroupObjectResponse>
  func get_group(request: Group_GetGroupRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Group_GroupObjectResponse>
  func search_groups(request: Group_SearchGroupsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Group_SearchGroupsResponse>
  func get_joined_groups(request: Group_GetJoinedGroupsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Group_GetJoinedGroupsResponse>
  func invite_to_group(request: Group_InviteToGroupRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Group_BaseResponse>
  func join_group(request: Group_JoinGroupRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Group_BaseResponse>
}

extension Group_GroupProvider {
  internal var serviceName: Substring { return "group.Group" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "create_group":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.create_group(request: request, context: context)
        }
      }

    case "get_group":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.get_group(request: request, context: context)
        }
      }

    case "search_groups":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.search_groups(request: request, context: context)
        }
      }

    case "get_joined_groups":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.get_joined_groups(request: request, context: context)
        }
      }

    case "invite_to_group":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.invite_to_group(request: request, context: context)
        }
      }

    case "join_group":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.join_group(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

